public ArrayList<Integer> findpath(Node nd,int key)
   {
       if(nd == null)
           return null;
       if(nd.data == key)
       {
            ArrayList<Integer> output = new ArrayList<>();
            output.add(key);
            return output;
       }
       else if(nd.data > key)
       {
           ArrayList<Integer> LeftOutput = findpath(nd.left,key);
           if(LeftOutput != null)
           {
               LeftOutput.add(nd.data);
           }
           
           return LeftOutput;
       }
       else
       {
           ArrayList<Integer> rightOutput = findpath(nd.right,key);
           if(rightOutput != null){
           rightOutput.add(nd.data);
           }
           return rightOutput;
       }
       
   }

   public Node deleteNode(int key,Node nd)
    {
        if(nd == null)
            return nd;
        
        if(key < nd.data)
        {
           nd.left =  deleteNode(key,nd.left);
        }
        
        else if(key > nd.data)
        {
           nd.right =   deleteNode(key,nd.right);
        }
        
        else
        {
            if(nd.right == null)
            {
                return nd.left;
                
            }
            else if(nd.left == null)
            {
                return nd.right;
                
            }
            
            nd.data = minInorder(nd.right);
            nd.right = deleteNode(nd.data,nd.right);
            
            
        }
      return  nd;
    }
    int minInorder(Node root)
    {
        while(root.left != null)
          minInorder(root.left); 
        
      return root.left.data;
    }
    
    // LONGEST COMMON ANCESTOR
    
    public int lca(Node node, int n1, int n2)
    {
        if(node == null)
            return -1;
        if(node.data > n1 && node.data > n2)
            return lca(node,n1,n2);
        else if(node.data > n1 && node.data > n2)
            return lca(node,n1,n2);
        
        return node.data;
       
        
        
    }
   
    
